/* Декоратор-шпион
важность: 5
 Создайте декоратор spy(func), который должен возвращать обёртку, которая сохраняет 
все вызовы функции в своём свойстве calls.
Каждый вызов должен сохраняться как массив аргументов.
Например:
*/
function work(a, b) {
  console.log(a + b); // произвольная функция или метод
}

function spy(func) {
  wrapper.calls = []; // сздаем новое свойство calls в ф-ии обертке
  function wrapper(...arg) {
    // используем остаточные параметры для создания массива аргументов
    wrapper.calls.push(arg); // пушим аргументы в calls
    return func.apply(this, arg); // возвращаяем исходную ф-ию, привязанную к контексту
  }
  return wrapper; // мозвращаем функцию - обертку
}

work = spy(work);

work(1, 2); // 3
work(4, 5); // 9

for (let args of work.calls) {
  console.log("call:" + args.join()); // "call:1,2", "call:4,5"
}
// P.S.: Этот декоратор иногда полезен для юнит-тестирования.
// Его расширенная форма – sinon.spy – содержится в библиотеке Sinon.JS.
