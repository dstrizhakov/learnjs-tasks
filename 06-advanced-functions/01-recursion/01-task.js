/*
Вычислить сумму чисел до данного
важность: 5
Напишите функцию sumTo(n), которая вычисляет сумму чисел 1 + 2 + ... + n.
Например:

sumTo(1) = 1
sumTo(2) = 2 + 1 = 3
sumTo(3) = 3 + 2 + 1 = 6
sumTo(4) = 4 + 3 + 2 + 1 = 10
...
sumTo(100) = 100 + 99 + ... + 2 + 1 = 5050
Сделайте три варианта решения:

С использованием цикла.
Через рекурсию, т.к. sumTo(n) = n + sumTo(n-1) for n > 1.
С использованием формулы арифметической прогрессии.
Пример работы вашей функции:

function sumTo(n) {  ... }

alert( sumTo(100) ); // 5050
P.S. Какой вариант решения самый быстрый? Самый медленный? Почему?

P.P.S. Можно ли при помощи рекурсии посчитать sumTo(100000)? 
*/

// ?Вариант с использованием цикла:
function sumTo(n) {
  let result = 0;
  for (let i = 1; i <= n; i++) {
    result += i;
  }
  return result;
}

console.log(sumTo(1) === 1);
console.log(sumTo(2) === 3);
console.log(sumTo(3) === 6);
console.log(sumTo(4) === 10);

// ?Вариант с использованием рекурсии:
function recSumTo(n) {
  if (n === 1) {
    return 1;
  } else {
    return n + sumTo(n - 1);
  }
}

console.log(recSumTo(1) === 1);
console.log(recSumTo(2) === 3);
console.log(recSumTo(3) === 6);
console.log(recSumTo(4) === 10);

// ?Вариант с использованием формулы арифметической прогрессии:
function arfSumTo(n) {
  return (n * (n + 1)) / 2;
}

console.log(arfSumTo(1) === 1);
console.log(arfSumTo(2) === 3);
console.log(arfSumTo(3) === 6);
console.log(arfSumTo(4) === 10);

//P.S. Какой вариант решения самый быстрый? Самый медленный? Почему?
// ?Самый быстрый arfSumTo(n) - использует всего три оператора, сложность O(1)
// ?самый медленнный recSumTo(n), сложность O(n)
// ?у sumTo(n) та же сложность O(n) но он быстрее так как нет вложенных вызовов

//P.P.S. Можно ли при помощи рекурсии посчитать sumTo(100000)?
// ?Может быть переполнение стека вызовов размер стека лучше ограничивать 10000
// ? это гарантированный размер
